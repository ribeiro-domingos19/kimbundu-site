// routes/comments.js (C√ìDIGO COMPLETO E CORRIGIDO)

const express = require('express');
const router = express.Router();
// üí° REMOVIDO: const fs = require('fs');
// üí° REMOVIDO: const path = require('path');
// üí° CORRE√á√ÉO: Importa as fun√ß√µes de acesso a dados do novo m√≥dulo centralizado
const { getComments, saveComments } = require('../database'); 
// Importa o requireAuth do auth.js (Assumindo que voc√™ manteve o auth.js no mesmo n√≠vel)
const { requireAuth } = require('./auth'); 


// üí° REMOVIDO: Fun√ß√µes auxiliares getComments e saveComments (Est√£o em database.js)


// Rota POST para enviar um novo coment√°rio. Usa requireAuth para proteger a rota.
router.post('/submit', requireAuth, (req, res) => {
    const { lessonId, message } = req.body;
    
    // req.user √© populado pelo middleware requireAuth
    if (!lessonId || !message || !req.user) {
        return res.status(400).send('Dados inv√°lidos ou usu√°rio n√£o logado.');
    }

    const comments = getComments();
    const newId = comments.length > 0 ? Math.max(...comments.map(c => c.id)) + 1 : 1;

    const newComment = {
        id: newId,
        lessonId: parseInt(lessonId),
        userId: req.user.id, // ID do usu√°rio logado
        username: req.user.username, // Nome do usu√°rio logado
        message: message,
        timestamp: new Date().toISOString(),
        adminResponse: null, 
        status: 'pending' 
    };

    comments.push(newComment);
    saveComments(comments);

    // Redireciona de volta para a aula, pulando para a se√ß√£o de coment√°rios
    res.redirect(`/lessons/${lessonId}#comments`);
});


module.exports = { router };

